from telegram import Update
from telegram.ext import ContextTypes
from core.db import get_tasks
from core.utils import short_list_menu_markup

async def search_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = " ".join(context.args).lower()
    if not query:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /search –æ—Ç—á–µ—Ç")
        return

    tasks = get_tasks()
    filtered = [task for task in tasks if query in task.title.lower()]

    if not filtered:
        await update.message.reply_text(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=short_list_menu_markup())
        return

    message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '{query}':\n\n"
    for i, task in enumerate(filtered, 1):
        status = "‚úÖ" if task.done else "üî≤"
        priority_icon = {3: "üî•", 2: "‚ö†Ô∏è", 1: "üìù"}.get(task.priority, "")
        message += f"{i}. {status} {priority_icon} {task.title}\n\n"

    await update.message.reply_text(message, reply_markup=short_list_menu_markup())
