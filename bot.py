from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
import os
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
from tasks import load_tasks, save_tasks, get_task_list, sort_tasks
from emojis import EMOJIS

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π ToDo-–±–æ—Ç.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /list, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏.\n"
        "–ò –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
    )

async def list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = load_tasks()
    message = get_task_list(tasks)
    await update.message.reply_text(message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üõ† *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/add <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –¥–∞–ª–µ–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏\n"
        "/delete <–Ω–æ–º–µ—Ä> ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/edit <–Ω–æ–º–µ—Ä> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/done <–Ω–æ–º–µ—Ä> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π / –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
        "/sort ‚Äî –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —Å—Ç–∞—Ç—É—Å—É\n"
        "/search <–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ> ‚Äî –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–∫—Å—Ç—É\n"
        "/listinline - –≤—ã–≤–æ–¥–∏—Ç –∑–∞–¥–∞—á–∏ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏\n"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    title = " ".join(context.args)
    if not title:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add.")
        return

    new_task = {
        "title": title,
        "priority": 2,
        "done": False
    }

    tasks = load_tasks()
    tasks.append(new_task)
    save_tasks(tasks)

    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {title}{EMOJIS['status']['done']}")
    message = get_task_list(tasks)
    await update.message.reply_text(message)

async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /delete 2")
        return

    index = int(context.args[0]) - 1
    tasks = load_tasks()

    if 0 <= index < len(tasks):
        deleted_task = tasks.pop(index)
        save_tasks(tasks)
        await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ ‚Ññ {index + 1} {deleted_task['title']}")
        message = get_task_list(tasks)
        await update.message.reply_text(message)
    else:
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∏ —Å –Ω–æ–º–µ—Ä–æ–º {index + 1} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

async def edit_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2 or not context.args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit <–Ω–æ–º–µ—Ä> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏>")
        return

    index = int(context.args[0]) - 1
    new_title = " ".join(context.args[1:])
    tasks = load_tasks()

    if 0 <= index < len(tasks):
        old_title = tasks[index]["title"]
        tasks[index]["title"] = new_title
        save_tasks(tasks)
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –∏–∑–º–µ–Ω–µ–Ω–∞:\n{old_title} ‚Üí {new_title}")
        message = get_task_list(tasks)
        await update.message.reply_text(message)
    else:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")

async def toggle_task_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /done 1")
        return

    index = int(context.args[0]) - 1
    tasks = load_tasks()

    if 0 <= index < len(tasks):
        tasks[index]["done"] = not tasks[index].get("done", False)
        save_tasks(tasks)
        status = "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" if tasks[index]["done"] else "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"

        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω—ë–Ω: {tasks[index]['title']} ‚Äî {status}")
        message = get_task_list(tasks)
        await update.message.reply_text(message)
    else:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")

async def sort_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = load_tasks()
    if not tasks:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á ‚úÖ")
        return

    sorted_tasks = sort_tasks(tasks)
    save_tasks(sorted_tasks)

    message = "üìã –ó–∞–¥–∞—á–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:\n\n"
    for idx, task in enumerate(sorted_tasks, start=1):
        status = "‚úÖ" if task["done"] else "üî≤"
        priority_icon = {3: "üî•", 2: "‚ö†Ô∏è", 1: "üìù"}.get(task["priority"], "")
        message += f"{idx}. {status} {priority_icon} {task['title']}\n\n"

    await update.message.reply_text(message)

async def search_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = " ".join(context.args).lower()
    if not query:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /search –æ—Ç—á–µ—Ç")
        return

    tasks = load_tasks()
    filtered = [task for task in tasks if query in task["title"].lower()]

    if not filtered:
        await update.message.reply_text(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '{query}':\n\n"
    for i, task in enumerate(filtered, 1):
        status = "‚úÖ" if task.get("done") else "üî≤"
        priority_icon = {3: "üî•", 2: "‚ö†Ô∏è", 1: "üìù"}.get(task["priority"], "")
        message += f"{i}. {status} {priority_icon} {task['title']}\n\n"

    await update.message.reply_text(message)

async def list_with_inline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = load_tasks()
    if not tasks:
        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç. {EMOJIS['status']['cancelled']}")
        return

    for i, task in enumerate(tasks):
        status = "‚úÖ" if task.get("done") else "üî≤"
        priority_icon = {3: "üî•", 2: "‚ö†Ô∏è", 1: "üìù"}.get(task["priority"], "")
        text = f"*{i + 1}. {status} {priority_icon} {task['title']}*"

        buttons = [
            InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å/–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"toggle_{i}"),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{i}")
        ]

        reply_markup = InlineKeyboardMarkup([buttons])
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

async def inline_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    tasks = load_tasks()

    if data.startswith("toggle_"):
        index = int(data.split("_")[1])
        if 0 <= index < len(tasks):
            tasks[index]["done"] = not tasks[index].get("done", False)
            save_tasks(tasks)
            await query.edit_message_text(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω—ë–Ω: {tasks[index]['title']}")
        else:
            await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏.")

    elif data.startswith("delete_"):
        index = int(data.split("_")[1])
        if 0 <= index < len(tasks):
            deleted_task = tasks.pop(index)
            save_tasks(tasks)
            await query.edit_message_text(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {deleted_task['title']}")
        else:
            await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏.")

    else:
        # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        message = get_task_list(tasks)
        await query.edit_message_text(message)

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("list", list))
    app.add_handler(CommandHandler("delete", delete_task))
    app.add_handler(CommandHandler("edit", edit_task))
    app.add_handler(CommandHandler("done", toggle_task_status))
    app.add_handler(CommandHandler("sort", sort_command))
    app.add_handler(CommandHandler("search", search_tasks))
    app.add_handler(CommandHandler("listinline", list_with_inline))
    app.add_handler(CallbackQueryHandler(inline_callback_handler))
    app.run_polling()
