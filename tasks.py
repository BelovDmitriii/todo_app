from datetime import datetime

def get_status_symbol(task):
    if task.startswith('[x]'):
        return '‚úÖ'
    elif task.startswith('[ ]'):
        return 'üî≤'
    else:
        return ''

# –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –∫–æ–Ω—Å–æ–ª–∏
def list_tasks():
    tasks = read_tasks()
    if not tasks:
        print("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        return

    print("–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:")
    for i, task in enumerate(tasks, start=1):
        status = get_status_symbol(task)
        text = task[4:].strip()
        print(f"{i}. {status} {text}")

#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
def add_task(task_text, filename = 'tasks.txt'):
    with open(filename, 'a', encoding='utf-8') as file:
        file.write(f"[ ] {task_text}\n")

#—á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞
def read_tasks(filename = 'tasks.txt'):
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            return [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        return []

#–∑–∞–ø–∏—Å—å –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
def write_tasks(tasks, filename = 'tasks.txt'):
    with open(filename, 'w', encoding='utf-8') as file:
        for task in tasks:
            if not task.endswith('\n'):
                task += '\n'
            file.write(task)

#—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª–µ
def edit_task(index, new_text):
    tasks = read_tasks()
    if 0 <= index < len(tasks):
        tasks[index] = new_text
        write_tasks(tasks)
        return True
    else:
        return False

#–æ—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è/ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è
# [ ] ‚Äî –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
# [x] ‚Äî –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
def toggle_task_status(index, complete = True):
    tasks = read_tasks()
    if 0 <= index < len(tasks):
        current = tasks[index].strip()

        if complete:
            if current.startswith('[ ]'):
                tasks[index] = current.replace('[ ]', '[x]', 1) + '\n'
                write_tasks(tasks)
                return 'marked_done'
            elif current.startswith('[x]'):
                return 'already_done'

        else:
            if current.startswith('[x]'):
                tasks[index] = current.replace('[x]', '[ ]', 1) + '\n'
                write_tasks(tasks)
                return 'marked_undone'
            elif current.startswith('[ ]'):
                return 'already_undone'

    return 'invalid_index'

#—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ/ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
def sort_tasks():
    tasks = read_tasks()

    completed = [task for task in tasks if task.strip().startswith('[x] ')]
    incomplete = [task for task in tasks if task.strip().startswith('[ ] ')]

    other = [task for task in tasks if task not in completed and task not in incomplete]

    sorted_tasks = incomplete + completed + other
    write_tasks(sorted_tasks)

    print("–ó–∞–¥–∞—á–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ ‚Äî –ø–æ—Å–ª–µ.")

#–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
def search_tasks(query):
    tasks = read_tasks()
    result = []
    for task in tasks:
        if query.lower() in task[3:].lower():
            result.append(task.strip())
    return result

# –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á –≤ .txt —Ñ–∞–π–ª –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
def export_tasks(filename):
    tasks = read_tasks()
    with open(filename, "w", encoding="utf-8") as file:
        current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        file.write(f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á - {current_date}\n")
        file.write("=" * 40 + "\n")
        for task in tasks:
            file.write(task.strip() + '\n')
