from datetime import datetime
import re

def get_priority_icon(priority):
    mapping = {
        "1": "üî•",
        "2": "‚ö†Ô∏è",
        "3": "üìù"
    }
    return mapping.get(priority, "‚¨ú")

# –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –∫–æ–Ω—Å–æ–ª–∏
def list_tasks():
    tasks = read_tasks()
    if not tasks:
        print("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        return

    print("–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:")
    for i, task in enumerate(tasks, 1):
        status = "[x]" if "[x]" in task else "[ ]"
        status_icon = "‚úÖ" if status == "[x]" else "üî≤"

        # –ò—â–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–∏–¥–∞ [1], [2], [3]
        match = re.search(r"\[(\d)\]", task)
        if match:
            priority_number = match.group(1)
        else:
            priority_number = "2"  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        priority_icon = get_priority_icon(priority_number)

        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
        clean_text = re.sub(r"\[.\]\s*\[.\]", "", task).strip()

        print(f"{i}. {status_icon} {priority_icon}  {clean_text}")

#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
def add_task(task_text, priority=2, filename = 'tasks.txt'):
    with open(filename, 'a', encoding='utf-8') as file:
        file.write(f"[ ] [{priority}] {task_text}\n")

#—á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞
def read_tasks(filename = 'tasks.txt'):
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            return [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        return []

#–∑–∞–ø–∏—Å—å –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
def write_tasks(tasks, filename = 'tasks.txt'):
    with open(filename, 'w', encoding='utf-8') as file:
        for task in tasks:
            if not task.endswith('\n'):
                task += '\n'
            file.write(task)

#—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª–µ
def edit_task(index, new_text):
    tasks = read_tasks()
    if 0 <= index < len(tasks):
        current = tasks[index].strip()

        status = "[x]" if "[x]" in current else "[ ]"

        match = re.search(r"\[(\d)\]", current)
        if match:
            priority = f"[{match.group(1)}]"
        else:
            priority = "[2]"

        tasks[index] = f"{status} {priority} {new_text}\n"
        write_tasks(tasks)
        return True
    else:
        return False

#–æ—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è/ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è
# [ ] ‚Äî –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
# [x] ‚Äî –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
def toggle_task_status(index, complete = True):
    tasks = read_tasks()
    if 0 <= index < len(tasks):
        current = tasks[index].strip()

        if complete:
            if current.startswith('[ ]'):
                tasks[index] = current.replace('[ ]', '[x]', 1) + '\n'
                write_tasks(tasks)
                return 'marked_done'
            elif current.startswith('[x]'):
                return 'already_done'

        else:
            if current.startswith('[x]'):
                tasks[index] = current.replace('[x]', '[ ]', 1) + '\n'
                write_tasks(tasks)
                return 'marked_undone'
            elif current.startswith('[ ]'):
                return 'already_undone'

    return 'invalid_index'

#—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ/ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
def sort_tasks():
    tasks = read_tasks()

    completed = [task for task in tasks if task.strip().startswith('[x] ')]
    incomplete = [task for task in tasks if task.strip().startswith('[ ] ')]

    other = [task for task in tasks if task not in completed and task not in incomplete]

    sorted_tasks = incomplete + completed + other
    write_tasks(sorted_tasks)

    print("–ó–∞–¥–∞—á–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ ‚Äî –ø–æ—Å–ª–µ.")

#–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
def search_tasks(query):
    tasks = read_tasks()
    result = []
    for task in tasks:
        if query.lower() in task[3:].lower():
            result.append(task.strip())
    return result

# –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á –≤ .txt —Ñ–∞–π–ª –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
def export_tasks(filename):
    tasks = read_tasks()
    with open(filename, "w", encoding="utf-8") as file:
        current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        file.write(f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á - {current_date}\n")
        file.write("=" * 40 + "\n")
        for task in tasks:
            file.write(task.strip() + '\n')

# –ò–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π
def import_tasks(filename):
    current_tasks = read_tasks()

    try:
        with open(filename, 'r', encoding="utf-8") as file:
            new_tasks = file.readlines()
    except FileNotFoundError:
        print(f"–§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    clean_new_tasks = [task.strip() for task in new_tasks if task.strip()]
    formatted_new_tasks = [f"[ ] {task}\n" for task in clean_new_tasks]

    update_tasks = current_tasks + formatted_new_tasks

    write_tasks(update_tasks)

    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(formatted_new_tasks)} –∑–∞–¥–∞—á(–∏) –∏–∑ —Ñ–∞–π–ª–∞ '{filename}'")
